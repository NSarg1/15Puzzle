{"version":3,"sources":["RndNumGenerator.js","components/TileContainer/Tile/Tile.js","components/TileContainer/TileContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["rndNum","rndNumArr","data","Tile","classes","num","id","click","animate","className","onClick","TileContainer","table","map","tile","key","rndNumGenerator","Math","floor","random","undefined","find","el","push","i","forEach","ind","App","setToNull","state","setState","changeNum","tileIndex","findIndex","nullIndex","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.558fd60e.chunk.js","sourcesContent":["let rndNum, rndNumArr, doesExist, data;\r\nrndNumArr = [];\r\ndata = [\r\n    { id: 0, num: 1, animate: null },\r\n    { id: 1, num: 2, animate: null },\r\n    { id: 2, num: 3, animate: null },\r\n    { id: 3, num: 4, animate: null },\r\n    { id: 4, num: 5, animate: null },\r\n    { id: 5, num: 6, animate: null },\r\n    { id: 6, num: 7, animate: null },\r\n    { id: 7, num: 8, animate: null },\r\n    { id: 8, num: 9, animate: null },\r\n    { id: 9, num: 10, animate: null },\r\n    { id: 10, num: 11, animate: null },\r\n    { id: 11, num: 12, animate: null },\r\n    { id: 12, num: 13, animate: null },\r\n    { id: 13, num: 14, animate: null },\r\n    { id: 14, num: 15, animate: null },\r\n    { id: 15, num: 16, animate: null }\r\n];\r\n\r\nconst rndNumGenerator = () => {\r\n    rndNum = Math.floor(Math.random() * 16 + 1);\r\n    doesExist = rndNumArr.find(el => el === rndNum);\r\n\r\n    if (doesExist === undefined) {\r\n        rndNumArr.push(rndNum);\r\n    } else {\r\n        return rndNumGenerator();\r\n    }\r\n};\r\nfor (let i = 0; i < 16; i++) {\r\n    rndNumGenerator();\r\n}\r\n\r\ndata.forEach((el, ind) => {\r\n    if (rndNumArr[ind] === 16) {\r\n        rndNumArr[ind] = null;\r\n    }\r\n    el.num = rndNumArr[ind];\r\n});\r\n\r\nexport default data;\r\n","import React from 'react';\r\n\r\nconst Tile = ({ num, id, click, animate }) => {\r\n    let classes;\r\n    if (num === null) {\r\n        classes = `item-${num} animated ${animate}`;\r\n    } else {\r\n        classes = `item item-${num} ${animate}`;\r\n    }\r\n\r\n    return (\r\n        <div className=\"Tile\" onClick={() => click(id)}>\r\n            <div className={classes}>{num}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tile;\r\n","import React from 'react';\r\nimport Tile from './Tile/Tile';\r\n\r\nconst TileContainer = ({ table, click }) => {\r\n    return (\r\n        <div className=\"TileContainer\">\r\n        <div className=\"TileContainer_box\">\r\n            {table.map(tile => {\r\n                return (\r\n                    <Tile\r\n                        key={tile.id}\r\n                        click={click}\r\n                        id={tile.id}\r\n                        num={tile.num}\r\n                        animate={tile.animate}\r\n                    />\r\n                );\r\n            })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TileContainer;\r\n","import React, { Component } from 'react';\nimport TileContainer from './components/TileContainer/TileContainer';\nimport data from './RndNumGenerator';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            table: data\n        };\n    }\n\n    componentDidMount() {\n        let table = [...this.state.table];\n        table.findIndex(el => {\n            return el.num === null;\n        });\n    }\n\n    setToNull = () => {\n        let table = [...this.state.table];\n        table.forEach(el => {\n            el.animate = null;\n        });\n        this.setState({ table: table });\n    };\n\n    changeNum = id => {\n        let tileIndex = this.state.table.findIndex(el => {\n            return el.id === id;\n        });\n        const table = [...this.state.table];\n        const nullIndex = this.state.table.findIndex(el => {\n            return el.num === null;\n        });\n\n        if (\n            nullIndex - tileIndex === 1 ||\n            nullIndex - tileIndex === 4 ||\n            tileIndex - nullIndex === 1 ||\n            tileIndex - nullIndex === 4\n        ) {\n            this.setToNull();\n            table[nullIndex].num = table[tileIndex].num;\n            if (nullIndex - tileIndex === 1) table[nullIndex].animate = 'slideToLeft';\n            if (nullIndex - tileIndex === 4) table[nullIndex].animate = 'slideToBottom';\n            if (tileIndex - nullIndex === 1) table[nullIndex].animate = 'slideToRight';\n            if (tileIndex - nullIndex === 4) table[nullIndex].animate = 'slideToTop';\n\n            this.setState({ table: table });\n            table[tileIndex].num = null;\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <TileContainer table={this.state.table} click={this.changeNum} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}